{"version":3,"sources":["TodoList.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","complete","id","x","listTodos","filter","el","setState","completed","state","todo","this","length","map","index","key","className","onClick","deleteTodo","to","Component","Nav","value","text","onChange","e","changeText","target","type","addTodo","App","newTodo","todos","a","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qhBA4BeA,E,YAzBZ,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAKVC,SAAW,SAACC,GACR,IAAIC,EAAI,EAAKH,MAAMI,UAAUC,QAAO,SAAAC,GAAE,OAAIA,EAAGJ,KAAOA,KAAI,GACxD,EAAKK,S,yVAAL,IAAkBJ,EAAlB,CAAqBK,WAAY,EAAKC,MAAMD,cAN5C,EAAKC,MAAQ,CACRC,KAAM,IAHI,E,sEAUT,IAAD,OACL,OACI,6BACkC,IAAhCC,KAAKX,MAAMI,UAAUQ,OAAe,6CAAyBD,KAAKX,MAAMI,UAAUS,KAAI,SAACH,EAAOI,GAAR,OACnF,yBAAKC,IAAKL,EAAKR,GAAIc,UAAU,SAC7B,4BAAQA,UAAU,eAAeC,QAAS,kBAAM,EAAKhB,SAASS,EAAKR,MAAM,EAAKO,MAAMP,KAAOQ,EAAKR,IAAO,EAAKO,MAAMD,UAAY,OAAuB,YACrJ,4BAAQQ,UAAU,aAAaC,QAAS,kBAAM,EAAKjB,MAAMkB,WAAWR,EAAKR,MAAzE,UACA,wBAAIc,UAAW,EAAKP,MAAMP,KAAOQ,EAAKR,GAAO,EAAKO,MAAMD,WAAa,YAAe,QAASE,EAAKS,a,GAlB3FC,aCURC,EAVH,SAACrB,GACT,OACI,yBAAKgB,UAAU,OACX,wBAAIA,UAAU,SAAd,aACA,wBAAIA,UAAU,OAAM,kDACpB,2BAAOM,MAAOtB,EAAMuB,KAAMC,SAAU,SAACC,GAAD,OAAOzB,EAAM0B,WAAWD,EAAEE,OAAOL,QAAQM,KAAK,OAAOZ,UAAU,UACnG,4BAAQC,QAASjB,EAAM6B,QAASb,UAAU,WAA1C,SCHRd,EAAK,EAkCM4B,E,YAhCb,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KAMR0B,WAAa,SAAAvB,GACX,EAAKI,SAAS,CAACgB,KAAMpB,KARJ,EAWnB0B,QAAU,SAAAnB,GACR,IAAIqB,EAAU,CAACZ,GAAIT,EAAMR,GAAIA,IAAMM,WAAW,GAC9C,EAAKD,SAAS,CAACyB,MAAM,GAAD,mBAAM,EAAKvB,MAAMuB,OAAjB,CAAwBD,MAC5C,EAAKxB,SAAS,CAACgB,KAAM,MAdJ,EAgBnBL,WAAa,SAAAhB,GACX,EAAKK,SAAS,CACZyB,MAAO,EAAKvB,MAAMuB,MAAM3B,QAAO,SAAAC,GAAE,OAAIA,EAAGJ,KAAOA,QAhBjD,EAAKO,MAAM,CACTc,KAAM,GACNS,MAAO,IAJQ,E,sEAqBV,IAAD,OACN,OACE,yBAAKhB,UAAU,OACX,kBAAC,EAAD,CAAKO,KAAMZ,KAAKF,MAAMc,KAAMG,WAAY,SAACO,GAAD,OAAO,EAAKP,WAAWO,IAAIJ,QAAS,kBAAM,EAAKA,QAAQ,EAAKpB,MAAMc,SAC1G,kBAAC,EAAD,CAAUnB,UAAWO,KAAKF,MAAMuB,MAAOd,WAAY,SAAChB,GAAD,OAAQ,EAAKgB,WAAWhB,W,GA1BnEkB,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.01602188.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass TodoList extends Component{\r\n   constructor(props) {\r\n       super(props);\r\n       this.state = {\r\n            todo: {}\r\n       }\r\n   }\r\n   complete = (id) => {\r\n       var x = this.props.listTodos.filter(el => el.id === id)[0]\r\n       this.setState({...x, completed: !this.state.completed})\r\n   }\r\n    render(){\r\n       return(\r\n           <div>\r\n            {this.props.listTodos.length === 0 ? <h1>No More Todos</h1> : this.props.listTodos.map((todo , index) => (\r\n                <div key={todo.id} className=\"items\">\r\n                <button className=\"btn-complete\" onClick={() => this.complete(todo.id)}>{this.state.id === todo.id  ? (this.state.completed ? \"Undo\" : \"Complete\") : \"Complete\"}</button>\r\n                <button className=\"btn-delete\" onClick={() => this.props.deleteTodo(todo.id)}>Delete</button>\r\n                <h1 className={this.state.id === todo.id  ? (this.state.completed && \"completed\") : \"todo\"}>{todo.to}</h1>\r\n                </div>\r\n            ))}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react'\r\n\r\nconst Nav = (props) => {\r\n    return (\r\n        <div className=\"nav\">\r\n            <h1 className=\"title\">TO-DO-APP</h1>\r\n            <h6 className=\"add\"><strong>Add New To-Do</strong></h6>\r\n            <input value={props.text} onChange={(e) => props.changeText(e.target.value)} type=\"text\" className=\"input\"></input>\r\n            <button onClick={props.addTodo} className=\"btn-add\">Add</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Nav\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport TodoList from './TodoList'\nimport Nav from './Nav'\n\nvar id = 0\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state={\n      text: '',\n      todos: []\n    }\n  }\n  changeText = x => {\n    this.setState({text: x})\n  }\n\n  addTodo = todo => {\n    let newTodo = {to: todo, id: id++, completed: false}\n    this.setState({todos: [...this.state.todos, newTodo]})\n    this.setState({text: ''})\n  }\n  deleteTodo = id => {\n    this.setState({\n      todos: this.state.todos.filter(el => el.id !== id)\n    })\n  }\n  render(){\n    return (\n      <div className=\"App\">\n          <Nav text={this.state.text} changeText={(a) => this.changeText(a)} addTodo={() => this.addTodo(this.state.text)}/>\n          <TodoList listTodos={this.state.todos} deleteTodo={(id) => this.deleteTodo(id)}/>\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}